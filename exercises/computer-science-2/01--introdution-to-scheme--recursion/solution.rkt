; ### Задача 1
; Запишете следните аритметични изрази в scheme:

; 1. (10 + 5.16 + 19 + 9.712361) * (20 - (16 - 4))    изчислява се до `350.97888`
(* (+ 10 5.16 19 9.712361) (- 20 (- 16 4)))

; 2. 1/4 + 2/5 + 3/8 + 6 * (5.1 - 1.6) * (9/3 - 7/4)    изчислява се до `27.274999999999995`
(+ 1/4 2/5 3/8 (* 6 (- 5.1 1.6) (- 9/3 7/4)))

; 3. (16 - 1.32)^2 + 2^(-4)    изчислява се до `215.5649`
(+ (expt (- 16 1.32) 2) (expt 2 -4))

; 4. 50^(60 % 7) + ((2^10) % 179)    изчислява се до `6251029`
(+ (expt 50 (remainder 60 7)) (remainder (expt 2 10) 179))

; 5. 3^(60 ÷ 7) + ((2^10) ÷ 179)    изчислява се до `6566`
(+ (expt 3 (quotient 60 7)) (quotient (expt 2 10) 179))

; ### Задача 2
; Напишете функция `odd?`, която проверява дали дадено число е нечетно. Използвайте `odd?`, за да дефинирате функция `even?`, която проверява дали дадено число е четно.

; Тука преименуваме функциите на `my-odd?` и `my-even?`, защото `odd?` и `even?` са вградени функции на езика
; и не може да ги предефинираме (в някои стандарти това е позволено, в R5RS - не е)
(define (my-odd? n) (= (modulo n 2) 1))
(define (my-even? n) (not (my-odd? n)))

; ### Задача 3
; Напишете функция, която реализира схемата за оценяване. Приема брой точки на студента и връща оценката, която той трябва да получи:
; ```
;     180т. -> 6.00
;     ... равноделни интервали за 5,4,3 ...
;     60т. -> 3.00
; ```
(define (grade p)
  (cond ((>= p 180) 6)
        ((>= p 140) 5)
        ((>= p 100) 4)
        ((>= p 60) 3)
        (else 2)))

; ### Задача 4
; Напишете функция, която по дадено `n` пресмята `n!` (факториел)
(define (fact n)
  (if (<= n 1)
      1
      (* n (fact (- n 1)))))

; ### Задача 5
; Напишете функция, която по дадено `n` връща `n`-тото число на Фибоначи. Редицата е дефинирана така:
; ```
;     F(0) = 0
;     F(1) = 1
;     F(n) = F(n - 1) + F(n - 2)
; ```
(define (fib n)
  (if (<= n 1)
      n
      (+ (fib (- n 1) (- n 2)))))

; ### Задача 6
; Напишете функция, която по дадени реални числа `a` и `b` пресмята сбора на целите числа в интервала `[a, b]`.

; Първо си дефинираме функция, в която `n` и `m` са цели числа
(define (sum-interval-integers n m)
  (if (> n m)
      0
      (+ n (sum-interval-integers (+ n 1) m))))

; След това изполваме горната, като просто реалните числа `a` и `b` закръгляме в правилната посока до цели
(define (sum-interval a b)
  (sum-interval-integers (ceiling a) (floor b)))

; ### Задача 7
; Напишете функция, която пресмята `x^n` бързо, използвайки [свойството](https://en.wikipedia.org/wiki/Exponentiation_by_squaring), че ако `n` е четно, то `x^n = (x^(n/2))^2`
(define (sq x) (* x x))

(define (fast-pow x n)
  (if (= n 0)
      1
      (if (my-even? n)
          (sq (fast-pow x (/ n 2)))
          (* x (fast-pow x (- n 1))))))

; ### Задача 8
; Напишете функция, която по дадена цифра `d` и число `n`, връща броя пъти, които `d` се среща в `n`.
(define (bool-to-num b)
  (if b 1 0))

(define (digit-occurance d n)
  (if (< n 10)
      (bool-to-num (= n d))
      (+ (bool-to-num (= d (remainder n 10)))
         (digit-occurance d (quotient n 10)))))
