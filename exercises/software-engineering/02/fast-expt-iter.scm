(define (square x)
  (* x x))

(define (fast-expt-iter x n)
  (define (iter product x n)
    (cond ((= n 0) product)
          ((even? n) (iter product (square x) (/ n 2)))
          (else (iter (* product x) x (- n 1)))))

  (if (< n 0)
      (/ 1 (fast-expt-iter x (- n)))
      (iter 1 x n)))

(load "../testing/check.scm")

(check (fast-expt-iter -2 -11) => -1/2048)
(check (fast-expt-iter -2 -10) => 1/1024)
(check (fast-expt-iter 2 -10) => 1/1024)
(check (fast-expt-iter 5 -3) => 1/125)
(check (fast-expt-iter 3 -2) => 1/9)
(check (fast-expt-iter 2 -2) => 1/4)
(check (fast-expt-iter 2 -1) => 1/2)
(check (fast-expt-iter 2 0) => 1)
(check (fast-expt-iter 2 1) => 2)
(check (fast-expt-iter 2 2) => 4)
(check (fast-expt-iter 3 2) => 9)
(check (fast-expt-iter 5 3) => 125)
(check (fast-expt-iter 2 10) => 1024)
(check (fast-expt-iter -2 10) => 1024)
(check (fast-expt-iter -2 11) => -2048)

(check-report)
(check-reset!)
