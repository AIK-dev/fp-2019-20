#lang racket

; Някой доста полезни функции от racket/list

; take:
(take '(1 2 3 4 5) 2) ; '(1 2)

; drop:
(drop '(1 2 3 4 5) 2) ; '(3 4 5)


; map с произволен брой аргументи
(map + '(1 2 3) '(4 5 6)) ; '(5 7 9)

; Както знаем има функции в scheme, които могат
; да приемат произволен брой аргументи.

; apply прилага функция над списък от аргументи
(apply + '(1 2 3 4 5)) ; 15
(apply max '(1 2 3 11 4 5)) ; 11

; Можем да правим функции на произволен брой аргументи
; (lambda (<args> . <args-list>) <body>)
; Където на мястото на args са изброени задължителните параметри,
; а args-list е списък с опционални параметри.
(lambda (x . l) (- x (apply + l)))
; Рабзбира се като знаем че define за функции е синтактична захар
; за свързване на име с ламбда. Тоест можем да правим и така
(define (sum x . l) (foldl + 0 (cons x l)))

; TODO: eval

; Този път повече задачи
; (заедно с каквото е останало от миналия път)
