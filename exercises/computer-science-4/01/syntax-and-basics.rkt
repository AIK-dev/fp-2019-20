; Не забравяйте за този ред
#lang racket

; Примитивни типове (константи)
; Символ
#\a
; Булева стойност
#t
; Числа
5
-5
1/3
1+6i
; Символен низ
"asdf"

; Функциите се прилагат в префиксна форма.
; (<name> <arg1> <arg2> ..)
; Винаги са оградени със скоби, като винаги първо е функцията.
; Всички елементи в списъка трябва да бъдат оценени до някаква стойност,
; за да се изчисли резултата.
(+ 1 2)
; + и * приемат произволен брой аргументи.
(* 1 2 3 4)

; По-слижни изрази - комбинации
(+ 2
   (/ 10 5)
   (* 1 2 3))
; В moodle има линк с препоръчан стил и идентация за Scheme.

; quote или '
; Оценката на израза е самия израз
'(+ 8 15)

; Специална форма за дефиниция на символи (придаване на стойност).
(define x 2)
; Можем да свързваме символи и с функции.
(define plus +)
(plus 5 2)

; Можем да дефинираме и функции.
; (define (<name> <arg1> <arg2> ..) <body>)
(define (square x) (* x x))
; По конвенция функциите, връщащи булеви стойности се именуват с "?" в края.
(define (is-positive? x) (> x 0))

; if е специална форма и е израз.
; Можем да го свържем със символ.
; (if <cond> <then-value> <else-value>)
; Условието е #t ако не е #f
(define one-eq-two?
    (if (= 1 2)
      "Im the pope!"
      "Expected"))

; cond е друг условен израз и също е специална форма.
; Може и без else.
(define (abs x)
  (cond [(< x 0) (- x)]
        [(= x 0) 0]
        [else x]))

; булевите операции and и or са специални форми.
(define div (or #t (/ 2 0)))
